#
# GNUmakefile.wlm_dll
#
# Copyright 2018 Broadcom
#
# This program is the proprietary software of Broadcom and/or
# its licensors, and may only be used, duplicated, modified or distributed
# pursuant to the terms and conditions of a separate, written license
# agreement executed between you and Broadcom (an "Authorized License").
# Except as set forth in an Authorized License, Broadcom grants no license
# (express or implied), right to use, or waiver of any kind with respect to
# the Software, and Broadcom expressly reserves all rights in and to the
# Software and all intellectual property rights therein.  IF YOU HAVE NO
# AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY
# WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE ALL USE OF
# THE SOFTWARE.
#
# Except as expressly set forth in the Authorized License,
#
# 1. This program, including its structure, sequence and organization,
# constitutes the valuable trade secrets of Broadcom, and you shall use
# all reasonable efforts to protect the confidentiality thereof, and to
# use this information only in connection with your use of Broadcom
# integrated circuit products.
#
# 2. TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED
# "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
# REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR
# OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
# DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
# NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
# ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
# CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
# OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
#
# 3. TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
# BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL,
# SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR
# IN ANY WAY RELATING TO YOUR USE OF OR INABILITY TO USE THE SOFTWARE EVEN
# IF BROADCOM HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES; OR (ii)
# ANY AMOUNT IN EXCESS OF THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF
# OR U.S. $1, WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY
# NOTWITHSTANDING ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.
#
#
# <<Broadcom-WL-IPTag/Proprietary:>>
#
# $Id: GNUmakefile.wlm_dll,v 1.6 2010-09-13 14:20:43 $
#

WLAN_ComponentsInUse := awd bcmwifi ppr math
include ../../makefiles/WLAN_Common.mk
SRCBASE = $(WLAN_SrcBaseR)

TARGETTYPE=DLL
REQUIRE_MSDEV=1
REQUIRE_WDM7600=1
REQUIRE_SDK60=1

NOK_DLL = wlu_nokia.dll
WLM_DLL = wlm.dll

REL_WLM_DIR = windows/win7/obj/wlm/free
DEB_WLM_DIR = windows/win7/obj/wlm/checked

include $(SRCBASE)/makefiles/env.mk

CFLAGS +=

vpath %.c $(SRCBASE)/shared $(WLAN_StdSrcDirsR) $(WLAN_ComponentSrcDirsR)

# env defined NEWPATH...
empty:=
space:= $(empty) $(empty)
export PATH:=$(subst $(space),:,$(strip $(NEWPATH))):$(PATH)

DEPENDS_CC = gcc
CC  = cl
RC  = rc
LD  = link
LIBCMD = lib
# Temporary patch to find mt.exe in SDK60
# This needs to be reset to just "mt", in SDK70
MT = $(firstword $(wildcard $(MSDEV)/VC/bin/mt.exe Z:/projects/hnd/tools/win/msdev/$(lastword $(subst /, ,$(MSDEV)))/VC/bin/mt.exe))

C_DEFINES  = -D WIN32 -D _WINDOWS -D _MBCS -D _USRDLL -D WLMDLL -D SERDOWNLOAD -D RWL_SERIAL -D RWL_DONGLE -D RWL_SOCKET -D RWL_WIFI -D D11AC_IOTYPES -D PPR_API

# OLYMPIC RWL flag
ifeq ($(OLYMPIC_RWL),1)
     C_DEFINES += -D OLYMPIC_RWL
endif

$(REL_WLM_DIR)/%.obj 	: C_DEFINES += -D NDEBUG
$(DEB_WLM_DIR)/%.obj   	: C_DEFINES += -D BCMINTERNAL -D BCMDBG

INCLUDES = $(SRCBASE)/include $(SRCBASE)/../components/shared $(SRCBASE)/../components/wlioctl/include $(SRCBASE)/wl/sys $(SRCBASE)/tools/shared $(SRCBASE)/../components/proto/include\
	   $(WLAN_StdIncDirsA) $(WLAN_ComponentIncDirsA)
MSINCLUDE=.;$(strip $(INCLUDES));$(MSDEV.INCLUDE)
CPPFLAGS = $(patsubst %,-I%,$(subst ;, ,$(MSINCLUDE)))
DEPENDS_CPPFLAGS = $(patsubst %,-I%,$(INCLUDES))

LIBPATHS=

LIBS = advapi32.lib
LIBS += iphlpapi.lib
LIBS += $(WDM7600WDK)/lib/wxp/i386/cfgmgr32.lib
LIBS += ws2_32.lib
LIBS += user32.lib

$(REL_WLM_DIR)/%	: LIBS += $(SRCBASE)/tools/epictrl/free/bcmctrl.lib
$(DEB_WLM_DIR)/%	: LIBS += $(SRCBASE)/tools/epictrl/checked/bcmctrl.lib

SOURCES = wlu.c wlu_common.c wlu_cmd.c wlu_iov.c wlu_ndis.c bcmutils.c bcmxtlv.c bcmwifi_channels.c bcmstdlib.c wlu_client_shared.c wlu_pipe.c wlu_pipe_win32.c wlm.c miniopt.c bcm_app_utils.c wlu_rates_matrix.c wlc_ppr.c bcm_math.c

SOURCES += wluc_phy.c
SOURCES += wluc_wnm.c
SOURCES += wluc_cac.c
SOURCES += wluc_relmcast.c
SOURCES += wluc_rrm.c
SOURCES += wluc_wowl.c
SOURCES += wluc_pkt_filter.c
SOURCES += wluc_mfp.c
SOURCES += wluc_ota_test.c
SOURCES += wluc_bssload.c
SOURCES += wluc_stf.c
SOURCES += wluc_offloads.c
SOURCES += wluc_tpc.c
SOURCES += wluc_toe.c
SOURCES += wluc_arpoe.c
SOURCES += wluc_keep_alive.c
SOURCES += wluc_ap.c
SOURCES += wluc_ampdu.c
SOURCES += wluc_ampdu_cmn.c
SOURCES += wluc_bmac.c
SOURCES += wluc_ht.c
SOURCES += wluc_wds.c
SOURCES += wluc_keymgmt.c
SOURCES += wluc_scan.c
SOURCES += wluc_obss.c
SOURCES += wluc_prot_obss.c
SOURCES += wluc_lq.c
SOURCES += wluc_seq_cmds.c
SOURCES += wluc_btcx.c
SOURCES += wluc_led.c
SOURCES += wluc_interfere.c
SOURCES += wluc_ltecx.c
SOURCES += wluc_he.c
SOURCES += wluc_twt.c
SOURCES += wluc_heb.c
SOURCES += wlu_subcounters.c
SOURCES += wluc_otp.c
SOURCES += wluc_tdmtx.c

##ifdef WL_NAN
#C_DEFINES += -D WL_NAN
#SOURCES += wluc_nan.c
##endif

#ifdef WLNDOE
C_DEFINES += -D WLNDOE
SOURCES += wluc_ndoe.c
#endif // endif

#ifdef WLP2PO
C_DEFINES += -D WLP2PO
SOURCES += wluc_p2po.c
#endif // endif

#idef WLANQPO
C_DEFINES += -D WLANQPO
SOURCES += wluc_anqpo.c
#endif // endif

#idef WLBDO
C_DEFINES += -D WLBDO
SOURCES += wluc_bdo.c
#endif // endif

#idef WLTKO
C_DEFINES += -D WLTKO
SOURCES += wluc_tko.c
#endif // endif

#idef WLPFN
C_DEFINES += -D WLPFN
SOURCES += wluc_pfn.c
#endif // endif

#idef WLP2P
C_DEFINES += -D WLP2P
SOURCES += wluc_p2p.c
#endif // endif

#idef WLTDLS
C_DEFINES += -D WLTDLS
SOURCES += wluc_tdls.c
#endif // endif

#idef WL_PROXDETECT
C_DEFINES += -D WL_PROXDETECT
SOURCES += wluc_proxd.c
#endif // endif

#idef WL_MSCH
C_DEFINES += -D WL_MSCH
SOURCES += wluc_msch.c
#endif // endif

#ifdef WL_BTL
C_DEFINES += -D WL_BTL
SOURCES += wluc_btl.c
#endif // endif

#ifdef WL_TVPM
C_DEFINES += -D WL_TVPM
SOURCES += wluc_tvpm.c
#endif // endif

SOURCES.OBJ	:= $(filter %.c,$(SOURCES))
SOURCES.OBJ	:= $(SOURCES.OBJ:%.c=%.obj)

all: mfg

#For use with this nok_cli in src/mfgc
mfg: $(DEB_WLM_DIR)/$(WLM_DLL) $(REL_WLM_DIR)/$(WLM_DLL)

# Make mfg dll for use with nok_cli in src/tools/mfg
$(REL_WLM_DIR)/$(WLM_DLL) : $(REL_WLM_DIR)/NUL \
	$(addprefix $(REL_WLM_DIR)/,$(SOURCES.OBJ)) \
	$(SRCBASE)/tools/epictrl/free/bcmctrl.lib
	@$(LINK_FILES)

$(DEB_WLM_DIR)/$(WLM_DLL) : $(DEB_WLM_DIR)/NUL \
	$(addprefix $(DEB_WLM_DIR)/,$(SOURCES.OBJ)) \
	$(SRCBASE)/tools/epictrl/checked/bcmctrl.lib
	@$(LINK_FILES)

Debug/% :: LINKFLAGS = /debug

# Define the command used to link all the objet files together into
# our final target.
#
define LINK_FILES
	echo "Linking DLL - $@"
	echo $(LIBS) $(LINKFLAGS)  /nologo /dll $(DEFFILE:%=/def:%) /pdb:"${@:%.dll=%.pdb}" /machine:I386 /NOD:libc.lib /NOD:libcmt.lib -OUT:$@ $(LIBPATHS) >$${TEMP}/LNK$${PPID}.tmp
	$(foreach p,$(filter %.obj %.res,$^),echo $(p) >>$${TEMP}/LNK$${PPID}.tmp; )
	echo "["
	cat $${TEMP}/LNK$${PPID}.tmp
	echo "]"
	LIB="$(MSSDK)/lib;$(MSDEV)/VC/LIB;$(MSDEV)/VC98/MFC/LIB" \
	$(LD) @`cygpath -w $${TEMP}`/LNK$${PPID}.tmp
        echo "$(MT) -manifest $(@).manifest -outputresource:$@\;2"
        $(MT) -manifest $(@).manifest -outputresource:$@\;2
	rm $${TEMP}/LNK$${PPID}.tmp
endef

$(REL_WLM_DIR)/%.obj: %.c
	@echo "Compiling - $(notdir $<)"
ifeq ($(REQUIRE_SDK60), 1)
	$(CC) /nologo /MD /W3 /EHsc /O2 /Fo"$(@D)/" /Fd"$(@D)/" /FD /c $(C_DEFINES) $(CPPFLAGS)   $<
else
	$(CC) /nologo /MD /W3 /WX /GX /O2 /Fo"$(@D)/" /Fd"$(@D)/" /FD /c $(C_DEFINES) $(CPPFLAGS)   $<
endif

$(DEB_WLM_DIR)/%.obj :  %.c
	@echo "Compiling - $(notdir $<)"
ifeq ($(REQUIRE_SDK60), 1)
	$(CC) /nologo /MDd /W3 /EHsc /ZI /Od /Fo"$(@D)/" /Fd"$(@D)/" /FD /RTC1  /c  $(C_DEFINES) $(CPPFLAGS) $<
else
	$(CC) /nologo /MDd /W3 /WX /GX /ZI /Od /Fo"$(@D)/" /Fd"$(@D)/" /FD /GZ  /c  $(C_DEFINES) $(CPPFLAGS) $<
endif

$(REL_WLM_DIR)/NUL $(DEB_WLM_DIR)/NUL : % :
	mkdir -p $(@D)

$(SRCBASE)/epiprot/lib/free/bcmctrl.lib :
	$(MAKE) -C $(SRCBASE)/epiprot/lib release

$(SRCBASE)/epiprot/lib/checked/bcmctrl.lib :
	$(MAKE) -C $(SRCBASE)/epiprot/lib debug

$(SRCBASE)/wl/cpl/preflib/Release/preflib.lib :
	$(MAKE) -C $(SRCBASE)/wl/cpl/preflib debug

$(SRCBASE)/wl/cpl/preflib/Debug/preflib.lib :
	$(MAKE) -C $(SRCBASE)/wl/cpl/preflib debug

clean:
	rm -f .*.d
	rm -f $(REL_WLM_DIR)/* $(DEB_WLM_DIR)/*

clobber:
	rm -f .*.d
	rm -rf  $(REL_WLM_DIR) $(DEB_WLM_DIR)

.PHONY: all clean clobber install # debug free

ifeq (,$(filter clean clobber install,$(MAKECMDGOALS)))
-include $(SOURCES.OBJ:%.obj=.%.d)
endif
